import { Injectable, ExecutionContext } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { Reflector } from '@nestjs/core';

@Injectable()
export class OptionalJwtAuthGuard extends AuthGuard('jwt') {
  constructor(private reflector: Reflector) {
    super();
  }

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    console.log('üîç OptionalJwtAuthGuard.canActivate - starting');
    console.log(
      'üîç OptionalJwtAuthGuard.canActivate - auth header:',
      request.headers.authorization,
    );

    try {
      const result = await super.canActivate(context);
      console.log(
        'üîç OptionalJwtAuthGuard.canActivate SUCCESS - result:',
        result,
      );
      console.log(
        'üîç OptionalJwtAuthGuard.canActivate SUCCESS - request.user:',
        request.user,
      );
      return result as boolean;
    } catch (error) {
      console.log('üîç OptionalJwtAuthGuard.canActivate ERROR:', error.message);
      console.log(
        'üîç OptionalJwtAuthGuard.canActivate ERROR - request.user after error:',
        request.user,
      );
      return true;
    }
  }

  handleRequest(err: any, user: any): any {
    console.log('üîç OptionalJwtAuthGuard.handleRequest called:', { err, user });
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    // –ï—Å–ª–∏ user === false, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º undefined
    const result = user === false ? undefined : user;
    console.log('üîç OptionalJwtAuthGuard.handleRequest returning:', result);
    return result;
  }
}
